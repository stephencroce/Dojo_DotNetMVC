//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace WebApplicationHack1.net.intelliclaim.webservices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LossNoticeSoap", Namespace="http://tempuri.org/")]
    public partial class LossNotice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private SessionHeader sessionHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetLossNoticeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLossNoticeHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLossNoticeAllOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LossNotice() {
            this.Url = global::WebApplicationHack1.Properties.Settings.Default.WebApplicationHack1_net_intelliclaim_webservices_LossNotice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public SessionHeader SessionHeaderValue {
            get {
                return this.sessionHeaderValueField;
            }
            set {
                this.sessionHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLossNoticeCompletedEventHandler GetLossNoticeCompleted;
        
        /// <remarks/>
        public event GetLossNoticeHeaderCompletedEventHandler GetLossNoticeHeaderCompleted;
        
        /// <remarks/>
        public event GetLossNoticeAllCompletedEventHandler GetLossNoticeAllCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLossNotice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLossNotice(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory) {
            object[] results = this.Invoke("GetLossNotice", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLossNoticeAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory) {
            this.GetLossNoticeAsync(userID, domainID, timeZoneID, localeID, applicationID, claimID, coBrandingDirectory, null);
        }
        
        /// <remarks/>
        public void GetLossNoticeAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, object userState) {
            if ((this.GetLossNoticeOperationCompleted == null)) {
                this.GetLossNoticeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLossNoticeOperationCompleted);
            }
            this.InvokeAsync("GetLossNotice", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory}, this.GetLossNoticeOperationCompleted, userState);
        }
        
        private void OnGetLossNoticeOperationCompleted(object arg) {
            if ((this.GetLossNoticeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLossNoticeCompleted(this, new GetLossNoticeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLossNoticeHeader", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLossNoticeHeader(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName) {
            object[] results = this.Invoke("GetLossNoticeHeader", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory,
                        employeeName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLossNoticeHeaderAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName) {
            this.GetLossNoticeHeaderAsync(userID, domainID, timeZoneID, localeID, applicationID, claimID, coBrandingDirectory, employeeName, null);
        }
        
        /// <remarks/>
        public void GetLossNoticeHeaderAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName, object userState) {
            if ((this.GetLossNoticeHeaderOperationCompleted == null)) {
                this.GetLossNoticeHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLossNoticeHeaderOperationCompleted);
            }
            this.InvokeAsync("GetLossNoticeHeader", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory,
                        employeeName}, this.GetLossNoticeHeaderOperationCompleted, userState);
        }
        
        private void OnGetLossNoticeHeaderOperationCompleted(object arg) {
            if ((this.GetLossNoticeHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLossNoticeHeaderCompleted(this, new GetLossNoticeHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("SessionHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLossNoticeAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLossNoticeAll(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName, out string FNOLHeader) {
            object[] results = this.Invoke("GetLossNoticeAll", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory,
                        employeeName});
            FNOLHeader = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLossNoticeAllAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName) {
            this.GetLossNoticeAllAsync(userID, domainID, timeZoneID, localeID, applicationID, claimID, coBrandingDirectory, employeeName, null);
        }
        
        /// <remarks/>
        public void GetLossNoticeAllAsync(int userID, int domainID, int timeZoneID, int localeID, int applicationID, int claimID, string coBrandingDirectory, string employeeName, object userState) {
            if ((this.GetLossNoticeAllOperationCompleted == null)) {
                this.GetLossNoticeAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLossNoticeAllOperationCompleted);
            }
            this.InvokeAsync("GetLossNoticeAll", new object[] {
                        userID,
                        domainID,
                        timeZoneID,
                        localeID,
                        applicationID,
                        claimID,
                        coBrandingDirectory,
                        employeeName}, this.GetLossNoticeAllOperationCompleted, userState);
        }
        
        private void OnGetLossNoticeAllOperationCompleted(object arg) {
            if ((this.GetLossNoticeAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLossNoticeAllCompleted(this, new GetLossNoticeAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class SessionHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string sessionIDField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLossNoticeCompletedEventHandler(object sender, GetLossNoticeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLossNoticeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLossNoticeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLossNoticeHeaderCompletedEventHandler(object sender, GetLossNoticeHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLossNoticeHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLossNoticeHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLossNoticeAllCompletedEventHandler(object sender, GetLossNoticeAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLossNoticeAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLossNoticeAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string FNOLHeader {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591